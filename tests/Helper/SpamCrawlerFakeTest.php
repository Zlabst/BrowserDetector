<?php
namespace BrowserDetectorTest\Helper;

use BrowserDetector\Helper\SpamCrawlerFake;

/**
 * Test class for KreditCore_Class_BrowserDetector.
 * Generated by PHPUnit on 2010-09-05 at 22:13:26.
 */
class SpamCrawlerFakeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \BrowserDetector\Helper\SpamCrawlerFake
     */
    private $object = null;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();

        $this->object = new SpamCrawlerFake();
    }

    /**
     * @dataProvider providerIsSpamOrCrawlerPositive
     * @param string $agent
     */
    public function testIsSpamOrCrawlerPositive($agent)
    {
        $this->object->setUserAgent($agent);

        self::assertTrue($this->object->isSpamOrCrawler());
    }

    public function providerIsSpamOrCrawlerPositive()
    {
        return array(
            array('curl/7.15.5 (i686-redhat-linux-gnu) libcurl/7.15.5 OpenSSL/0.9.8b zlib/1.2.3 libidn/0.6.5'),
            array('NetLyzer FastProbe'),
        );
    }

    /**
     * @dataProvider providerIsFakeIePositive
     * @param string $agent
     */
    public function testIsFakeIePositive($agent)
    {
        $this->object->setUserAgent($agent);

        self::assertTrue($this->object->isFakeIe());
    }

    public function providerIsFakeIePositive()
    {
        return array(
            array('Mozilla/5.0 (compatible; MSIE 10.6; Windows NT 6.1; Trident/5.0; InfoPath.2; SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 2.0.50727) 3gpp-gba UNTRUSTED/1.0'),
        );
    }

    /**
     * @dataProvider providerIsFakeIeNegative
     * @param string $agent
     */
    public function testIsFakeIeNegative($agent)
    {
        $this->object->setUserAgent($agent);

        self::assertFalse($this->object->isFakeIe());
    }

    public function providerIsFakeIeNegative()
    {
        return array(
            array('Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0; InfoPath.2; SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 2.0.50727) 3gpp-gba UNTRUSTED/1.0'),
            array('Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Win 9x 4.90; .NET CLR 1.1.4322)'),
        );
    }

    /**
     * @dataProvider providerisFakeWindowsPositive
     * @param string $agent
     */
    public function testisFakeWindowsPositive($agent)
    {
        $this->object->setUserAgent($agent);

        self::assertTrue($this->object->isFakeWindows());
    }

    public function providerisFakeWindowsPositive()
    {
        return array(
            array('Mozilla/5.0 (compatible; MSIE 10.0; Windows XP; Trident/5.0; InfoPath.2; SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 2.0.50727) 3gpp-gba UNTRUSTED/1.0'),
        );
    }

    /**
     * @dataProvider providerisFakeWindowsNegative
     * @param string $agent
     */
    public function testisFakeWindowsNegative($agent)
    {
        $this->object->setUserAgent($agent);

        self::assertFalse($this->object->isFakeWindows());
    }

    public function providerisFakeWindowsNegative()
    {
        return array(
            array('Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0; InfoPath.2; SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 2.0.50727) 3gpp-gba UNTRUSTED/1.0'),
            array('Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Win 9x 4.90; .NET CLR 1.1.4322)'),
        );
    }
}
