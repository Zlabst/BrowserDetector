<?php
namespace BrowserDetectorTest;

use BrowserDetector\BrowserDetector;

/**
 * Test class for KreditCore_Class_BrowserDetector.
 * Generated by PHPUnit on 2010-09-05 at 22:13:26.
 */
class BrowserDetectorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \BrowserDetector\BrowserDetector
     */
    private $object = null;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();

        $this->object = new BrowserDetector();
    }

    /**
     *
     */
    public function testSetGetCache()
    {
        $cache = $this->getMock('\WurflCache\Adapter\Memory', array(), array(), '', false);

        self::assertSame($this->object, $this->object->setCache($cache));
        self::assertSame($cache, $this->object->getCache());
    }

    /**
     *
     */
    public function testSetGetCachePrefix()
    {
        $prefix = 'testPrefix';

        self::assertSame($this->object, $this->object->setCachePrefix($prefix));
        self::assertSame($prefix, $this->object->getCachePrefix());
    }

    /**
     * tests the setter and the getter for a logger
     */
    public function testSetGetLogger()
    {
        $logger = $this->getMock('\Monolog\Logger', array(), array(), '', false);

        self::assertSame($this->object, $this->object->setLogger($logger));
        self::assertSame($logger, $this->object->getLogger());
    }

    /**
     *
     */
    public function testSetGetAgent()
    {
        $agent = 'testUserAgent';

        self::assertSame($this->object, $this->object->setAgent($agent));
        self::assertSame($agent, $this->object->getAgent());
    }

    public function testGetDefaultInterface()
    {
        self::assertInstanceOf('\BrowserDetector\Input\UserAgent', $this->object->getInterface());
    }

    public function testSetGetInteraface()
    {
        $logger = $this->getMock('\Monolog\Logger', array(), array(), '', false);
        $this->object->setLogger($logger);

        $cache = $this->getMock('\WurflCache\Adapter\Memory', array(), array(), '', false);
        $this->object->setCache($cache);


        $interface = $this->getMock('\BrowserDetector\Input\UserAgent', array('setCache'), array(), '', false);
        $interface
            ->expects(self::once())
            ->method('setCache')
            ->will(self::returnSelf())
        ;

        $this->object->setInterface($interface);

        self::assertSame($interface, $this->object->getInterface());
    }
}
