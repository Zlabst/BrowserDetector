<?php
declare(ENCODING = 'iso-8859-1');
namespace Test;

// Call HTML_Common3_TestSuite_Standard::main() if this source file is executed directly.
if (!defined("PHPUnit2_MAIN_METHOD")) {
    define("PHPUnit2_MAIN_METHOD", "Standard::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

// You may remove the following line when all tests have been implemented.
require_once "PHPUnit/Framework/IncompleteTestError.php";

require_once "HTML/Common3.php";

/**
 * A non-abstract subclass of HTML_Common3 
 *
 * HTML_Common3 cannot be instantiated due to abstract toHtml() method,
 * we need to (sort of) implement that.
 */
class Concrete extends \HTML\Common3
{
    protected $posAttributes = array(
        '#all'    => array (
            'style',
            'height',
            'multiple',
            'width',
            'class',
            'checked',
            'nowrap',
            'selected',
            'onclick',
            'readonly'
        )
    );
    
    /**
     * List of attributes to which will be announced via 
     * {@link onAttributeChange()} method rather than performed by
     * HTML_Common3 class itself
     *
     * contains all required attributes
     *
     * @var      array
     * @see      onAttributeChange()
     * @see      getWatchedAttributes()
     * @access   protected
     * @readonly
     */
    protected $watchedAttributes = array('readonly', 'uppercase');

    protected $attributes = array(
        'readonly'  => 'this attribute is readonly',
        'uppercase' => 'VALUE OF THIS IS ALWAYS UPPERCASE'
    );
    
    public function init()
    {
        parent::init();
        
        $this->allAttributes['readonly'] = array(
            'type'        => '#CNAME',
            'sc'        => false,
            'replace'    => null,
            'space'        => true
        );
        
        $this->allAttributes['uppercase'] = array(
            'type'        => '#CNAME',
            'sc'        => false,
            'replace'    => null,
            'space'        => true
        );
        
        return $this;
    }
    
    protected function onAttributeChange($name, $value = null)
    {
        if ('readonly' == $name) {
            return;
        }
        if ('uppercase' == $name) {
            if (null === $value) {
                unset($this->attributes[$name]);
            } else {
                $this->attributes[$name] = strtoupper($value);
            }
        }
    }
}

/**
 * Test class for HTML_Common3.
 * Generated by PHPUnit2_Util_Skeleton on 2008-08-03 at 15:03:13.
 */
class Standard extends \PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new \PHPUnit_Framework_TestSuite("HTML_Common3_TestSuite_Standard");
        $result = \PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    public function testConstructorIgnoresDefaultAttributesIfUnknown()
    {
        $msg = null;
        try{
            $obj = new Concrete(array('foo' => 'bar'));
            $this->assertSame(array(), $obj->getAttributes()); //empty array
            $this->assertType('array', $obj->getAttributes()); 
        } catch(HTML_Common3_Exception $e) {
            $msg = $e->getFinalMessage();
        }
        $this->assertNull($msg); //no error
    }

    public function testConstructorSetsDefaultAttributes()
    {
        $obj = new Concrete();
        $this->assertSame(array(), $obj->getAttributes());
        
        $obj = new Concrete(array('style' => 'height:20px;'));
        $this->assertSame(array('style' => 'height:20px;'), $obj->getAttributes());
    }

    /**
     * Generated from @assert () == '3.0.0'.
     */
    public function testApiVersion()
    {
        $this->assertSame('3.0.0', HTML_Common3::apiVersion());
        $this->assertType('string', HTML_Common3::apiVersion());
    }

    /**
     * Generated from @assert () == '3.0.0'.
     */
    public function testGetApiVersion()
    {
        $obj = new Concrete();
        $this->assertSame('3.0.0', $obj->getApiVersion());
        $this->assertType('string', $obj->getApiVersion());
    }

    /**
     * Generated from @assert () === ''.
     */
    public function testGetElementName()
    {
        $obj = new Concrete();
        $this->assertSame('', $obj->getElementName());
    }

    public function testUnknownAttributeIsNull()
    {
        $obj = new Concrete();
        $this->assertNull($obj->getAttribute('foobar'));
    }

    public function testAttributeNamesAreLowercased()
    {
        $obj = new Concrete();
        
        $msg = null;
        try{
            $obj->setAttributes(array('STYLE' => 'height:20px;'));
        } catch(HTML_Common3_Exception $e) {
            $msg = $e->getFinalMessage();
        }
        $this->assertNull($msg);
        
        $msg = null;
        try{
            $obj->setAttribute('Multiple', 'bar');
        } catch(HTML_Common3_Exception $e) {
            $msg = $e->getFinalMessage();
        }
        $this->assertNull($msg);
        
        $obj->mergeAttributes(array('HeIGHt' => '100%'));
        
        $this->assertNotSame('bar', $obj->getAttribute('MuLtIpLe'));
        $this->assertSame('multiple', $obj->getAttribute('MuLtIpLe'));
        
        $this->assertSame(
            array('style' => 'height:20px;', 'multiple' => 'multiple', 'height' => '100%'), 
            $obj->getAttributes()
        );
    }

    public function testAttributeValuesAreStrings()
    {
        $obj = new Concrete();
        
        $msg = null;
        try{
            $obj->setAttributes(array('onclick' => null, 'width' => 10));
        } catch(HTML_Common3_Exception $e) {
            $msg = $e->getFinalMessage();
        }
        $this->assertNull($msg);
        
        $msg = null;
        try{
            $obj->setAttribute('height', 2.5);
        } catch(HTML_Common3_Exception $e) {
            $msg = $e->getFinalMessage();
        }
        $this->assertNull($msg);
        
        $obj->mergeAttributes(array('multiple' => 42));
        foreach ($obj->getAttributes() as $attribute) {
            $this->assertType('string', $attribute);
        }
    }

    public function testUnknownOptionIsNull()
    {
        $obj = new Concrete();
        $this->assertNull($obj->getOption('foobar'));
    }

    public function testAnyOptionAllowed()
    {
        $obj = new Concrete();
        $obj->setOption('foobar', 'baz');
        $this->assertSame('baz', $obj->getOption('foobar'));
        
        $obj->setOption('foobar2', 2);
        $this->assertSame(2, $obj->getOption('foobar2'));
        
        $obj->setOption('foobar3', 2.5);
        $this->assertSame(2.5, $obj->getOption('foobar3'));
        
        $obj->setOption('foobar4', null);
        $this->assertSame(null, $obj->getOption('foobar4'));
    }

    /**
     * Generated from @assert ('id')     ==  ''.
     */
    public function testNotSetAttributeIsNull()
    {
        $obj = new Concrete();
        $this->assertNull($obj->getAttribute('id'));
    }

    /**
     * Generated from @assert () == array().
     */
    public function testGetWatchedAttributes()
    {
        $obj = new Concrete();
        $this->assertSame(array('readonly', 'uppercase'), $obj->getWatchedAttributes());
    }

    /**
     * Generated from @assert ('foobar')    === null.
     */
    public function testGetOption()
    {
        $obj = new Concrete();
        $this->assertSame(null, $obj->getOption('foobar'));
    }

    /**
     * Generated from @assert ('charset')   ==  'utf-8'.
     */
    public function testGetOption2()
    {
        $obj = new Concrete();
        $this->assertSame('utf-8', $obj->getOption('charset'));
    }

    /**
     * Generated from @assert ('indent')    ==  '    '.
     */
    public function testGetOption3()
    {
        $obj = new Concrete();
        $this->assertSame('    ', $obj->getOption('indent'));
    }

    /**
     * Generated from @assert ('linebreak') ==  "\12".
     */
    public function testGetOption4()
    {
        $obj = new Concrete();
        $this->assertSame("\12", $obj->getOption('linebreak'));
    }

    /**
     * Generated from @assert ('level')     === 0.
     */
    public function testGetOption5()
    {
        $obj = new Concrete();
        $this->assertSame(0, $obj->getOption('level'));
    }

    /**
     * Generated from @assert ('comment')   === null.
     */
    public function testGetOption6()
    {
        $obj = new Concrete();
        $this->assertSame(null, $obj->getOption('comment'));
    }

    /**
     * Generated from @assert ('browser')   === null.
     */
    public function testGetOption7()
    {
        $obj = new Concrete();
        $this->assertSame(null, $obj->getOption('browser'));
    }

    /**
     * Generated from @assert ('i18n')      === null.
     */
    public function testGetOption8()
    {
        $obj = new Concrete();
        $this->assertSame(null, $obj->getOption('i18n'));
    }

    /**
     * Generated from @assert ('mime')      ==  'text/html'.
     */
    public function testGetOption9()
    {
        $obj = new Concrete();
        $this->assertSame('text/html', $obj->getOption('mime'));
    }

    /**
     * Generated from @assert ('cache')     === false.
     */
    public function testGetOption10()
    {
        $obj = new Concrete();
        $this->assertSame(false, $obj->getOption('cache'));
    }

    /**
     * Generated from @assert () === false.
     */
    public function testGetEmpty()
    {
        $obj = new Concrete();
        $this->assertSame(false, $obj->getEmpty());
    }

    /**
     * Generated from @assert () === false.
     */
    public function testGetIsRootElement()
    {
        $obj = new Concrete();
        $this->assertSame(false, $obj->getIsRootElement());
    }

    /**
     * Generated from @assert () == array().
     */
    public function testGetElements()
    {
        $obj = new Concrete();
        $this->assertSame(array(), $obj->getElements());
    }

    /**
     * Generated from @assert () === false.
     */
    public function testGetDisabled()
    {
        $obj = new Concrete();
        $this->assertSame(false, $obj->getDisabled());
    }

    /**
     * Generated from @assert () == ''.
     */
    public function testGetValue()
    {
        $obj = new Concrete();
        $this->assertSame('', $obj->getValue());
    }

    /**
     * Generated from @assert () === false.
     */
    public function testGetCache()
    {
        $obj = new Concrete();
        $this->assertSame(false, $obj->getCache());
        
        $obj = new Concrete(array('cache'=>false));
        $this->assertSame(false, $obj->getCache());
        
        $obj = new Concrete(array('cache'=>true));
        $this->assertSame(true, $obj->getCache());
    }
    
    /**
     * Generated from @assert () == 'text/html'.
     */
    public function testGetMime()
    {
        $obj = new Concrete();
        $this->assertSame('text/html', $obj->getMime());
        
        $obj = new Concrete(array( 'doctype' => 'XHTML 1.1'));
        $this->assertSame('application/xhtml+xml', $obj->getMime());
        
        $obj = new Concrete();
        $obj->setMime('application/pdf');
        $this->assertSame('application/pdf', $obj->getMime());
    }
    
    /**
     * Generated from @assert () == 'text/html'.
     */
    public function testGetMimeEncoding()
    {
        $obj = new Concrete();
        $this->assertSame('text/html', $obj->getMimeEncoding());
        
        $obj = new Concrete(array( 'doctype' => 'XHTML 1.1'));
        $this->assertSame('application/xhtml+xml', $obj->getMimeEncoding());
        
        $obj = new Concrete();
        $obj->setMimeEncoding('application/pdf');
        $this->assertSame('application/pdf', $obj->getMimeEncoding());
    }
    
    /**
     * Generated from @assert () == ''.
     */
    public function testGetType()
    {
        $obj = new Concrete();
        $this->assertSame('', $obj->getType());
    }
    
    /**
     * @todo Implement testGetAddingToDtd().
     */
    public function testAllowToExtendDoTypeDefinition() {
        // Remove the following line when you implement this test.
        throw new PHPUnit_Framework_IncompleteTestError;
    }

    public function testDefaultIndentLevelIsZero()
    {
        $obj = new Concrete();
        $this->assertSame(0, $obj->getIndentLevel());
    }

    public function testIndentLevelIsNonnegativeInteger()
    {
        $obj = new Concrete();
        $obj->setIndentLevel(-1);
        $this->assertSame(0, $obj->getIndentLevel());
        $obj->setIndentLevel(1);
        $this->assertSame(1, $obj->getIndentLevel());
    }

    public function testDefaultCommentIsNull()
    {
        $obj = new Concrete();
        $this->assertNull($obj->getComment());
    }

    public function testCommentIsString()
    {
        $obj = new Concrete(array('comment'=>'Hallo'));
        $this->assertNull($obj->getComment());
        $obj->setComment('Hallo');
        $this->assertSame('Hallo', $obj->getComment());
    }

    public function testAttributesAsStringAccepted()
    {
        $obj = new Concrete('multiple  style= "height: 2em;" class=\'foo\' width=100% ');
        $this->assertSame(
            array('multiple' => 'multiple', 'style' => 'height: 2em;', 
                  'class' => 'foo', 'width' => '100%'), 
            $obj->getAttributes()
        );
    }

    public function testNonXhtmlAttributesTransformed()
    {
        $obj = new Concrete(array('multiple'));
        $obj->setAttribute('selected');
        $obj->mergeAttributes('checked nowrap');
        $this->assertSame(
            array('multiple' => 'multiple', 'selected' => 'selected', 
                  'checked' => 'checked', 'nowrap' => 'nowrap'),
            $obj->getAttributes()
        );
    }

    public function testWellFormedXhtmlGenerated()
    {
        $obj = new Concrete(array('onclick' => 'bar&"baz"', 'style' => 'xyz\'zy'));
        $this->assertSame(
            ' onclick="bar&amp;&quot;baz&quot;" style="xyz&#039;zy"',
            $obj->getAttributes(true)
        );
    }
    
    public function testCanWatchAttributes()
    {
        $obj = new Concrete();
        $obj->setAddToDtd(true);
        
        $msg = null;
        try{
            $obj->setAttributes(array('readonly' => 'something', 'uppercase' => 'new value', 'foo' => 'bar'));
        } catch(HTML_Common3_Exception $e) {
            $msg = $e->getFinalMessage();
        }
        $this->assertNull($msg);
        
        $obj->mergeAttributes(array('readonly' => 'something', 'uppercase' => 'other value', 'foo' => 'baz', 'onclick' => 'abc();'));
        $this->assertSame(
            array('onclick' => 'abc();'),
            $obj->getAttributes()
        );
        
        $obj->setAttribute('readonly', 'something else');
        $msg = null;
        try{
            $obj->setAttribute('uppercase', 'yet another value');
        } catch(HTML_Common3_Exception $e) {
            $msg = $e->getFinalMessage();
        }
        $this->assertNull($msg);
        
        $msg = null;
        try{
            $obj->setAttribute('foo', 'quux');
        } catch(HTML_Common3_Exception $e) {
            $msg = $e->getFinalMessage();
        }
        $this->assertNull($msg);
        
        $this->assertSame(
            array('onclick' => 'abc();'),
            $obj->getAttributes()
        );

        $obj->removeAttribute('readonly');
        $obj->removeAttribute('uppercase');
        $obj->removeAttribute('foo');
        //var_dump($obj->getAttributes());
        $this->assertSame(
            array('onclick' => 'abc();'),
            $obj->getAttributes()
        );
    }

    public function testFluentInterfaces()
    {
        $obj = new Concrete();

        $this->assertSame($obj, $obj->setAttributes(array('foo' => 'foo value')));
        $this->assertSame($obj, $obj->mergeAttributes(array('bar' => 'bar value')));
        
        try{
            $this->assertSame($obj, $obj->setAttribute('baz', 'baz value'));
            
            $msg = null;
        } catch(HTML_Common3_Exception $e) {
            $msg = $e->getFinalMessage();
        }
        $this->assertNull($msg);
        
        $this->assertSame($obj, $obj->removeAttribute('bar'));
        $this->assertSame($obj, $obj->setComment('A comment'));
        $this->assertSame($obj, $obj->setIndentLevel(3));
    }
    
    public function testCreateXHML11WithSchemaLocation()
    {
        require_once "HTML/Common3/Root/Html.php";
        
        $html = new HTML_Common3_Root_Html(array(
            'doctype'            => 'XHTML 1.1',
            'xmlns:xsi'          => 'http://www.w3.org/2001/XMLSchema-instance',
            'xsi:schemaLocation' => 'http://www.w3.org/MarkUp/SCHEMA/xhtml11.xsd',
            'cache'              => true
        ));
        
        $out      = $html->toHtml(0, false, true);
        $shouldBe = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- type:html - begin -->
<html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.w3.org/MarkUp/SCHEMA/xhtml11.xsd" xmlns="http://www.w3.org/1999/xhtml">
    <!-- type:head - begin -->
    <head>
        <title></title>
        <meta content="application/xhtml+xml; charset=utf-8" http-equiv="content-type" />
        <meta content="std" http-equiv="content-language" />
    </head>
    <!-- type:head - end -->
    <body>
    <!-- no Content to show -->
    </body>
</html>
<!-- type:html - end -->';
        //var_dump($out);
        //var_dump($shouldBe);
        $this->assertSame($out, $shouldBe);
    }
    
    /**
     * Generated from @assert ('foobar') === null.
     */
    public function testGetAttribute()
    {
        $obj = new Concrete();
        
        $this->assertSame(null, $obj->getAttribute('foobar'));
    }

    /**
     * Generated from @assert ('id')     === null.
     */
    public function testGetAttribute2()
    {
        $obj = new Concrete();
        
        $this->assertSame(null, $obj->getAttribute('id'));
    }

    /**
     * Generated from @assert () === false.
     */
    public function testGetElementEmpty()
    {
        $obj = new Concrete();
        
        $this->assertSame(false, $obj->getElementEmpty());
    }

    /**
     * Generated from @assert () === null.
     */
    public function testGetParent()
    {
        $obj = new Concrete();
        
        $this->assertSame(null, $obj->getParent());
    }

    /**
     * Generated from @assert () === null.
     */
    public function testGetHtml()
    {
        $obj = new Concrete();
        
        $this->assertSame(null, $obj->getHtml());
    }

    /**
     * Generated from @assert () === array('type'=>'xhtml', 'version'=>'1.0', 'variant'=>'strict').
     */
    public function testGetDoctype()
    {
        $obj = new Concrete();
        
        $this->assertSame(array('type'=>'xhtml', 'version'=>'1.0', 'variant'=>'strict'), $obj->getDoctype());
    }

    /**
     * Generated from @assert () === array().
     */
    public function testGetPosElements()
    {
        $obj = new Concrete();
        
        $this->assertSame(array(), $obj->getPosElements());
    }

    /**
     * Generated from @assert () === array().
     */
    public function testGetForbidElements()
    {
        $obj = new Concrete();
        
        $this->assertSame(array(), $obj->getForbidElements());
    }

    /**
     * Generated from @assert () === array().
     */
    public function testGetPosAttributes()
    {
        $obj = new Concrete();
        
        $this->assertSame(array (
            'style',
            'height',
            'multiple',
            'width',
            'class',
            'checked',
            'nowrap',
            'selected',
            'onclick',
            'readonly'
        ), $obj->getPosAttributes());
    }

    /**
     * Generated from @assert () === array().
     */
    public function testGetIDs()
    {
        $obj = new Concrete();
        
        $this->assertSame(array(), $obj->getIDs());
    }

    /**
     * Generated from @assert () === false.
     */
    public function testGetAddToDtd()
    {
        $obj = new Concrete();
        
        $this->assertSame(false, $obj->getAddToDtd());
    }

    /**
     * Generated from @assert () === false.
     */
    public function testGetAddingToDtd()
    {
        $obj = new Concrete();
        
        $this->assertSame(false, $obj->getAddingToDtd());
    }

    /**
     * Generated from @assert () === 'std'.
     */
    public function testGetLang()
    {
        $obj = new Concrete();
        
        $this->assertSame('std', $obj->getLang());
    }

    /**
     * Generated from @assert () === array().
     */
    public function testGetAttributes()
    {
        $obj = new Concrete();
        
        $this->assertSame(array(), $obj->getAttributes());
    }

    /**
     * Generated from @assert () === null.
     */
    public function testGetId()
    {
        $obj = new Concrete();
        
        $this->assertSame(null, $obj->getId());
    }

    /**
     * Generated from @assert () === ''.
     */
    public function testGetName()
    {
        $obj = new Concrete();
        
        $this->assertSame('', $obj->getName());
    }

    /**
     * Generated from @assert () === 0.
     */
    public function testGetIndentLevel()
    {
        $obj = new Concrete();
        
        $this->assertSame(0, $obj->getIndentLevel());
    }

    /**
     * Generated from @assert () === '    '.
     */
    public function testGetTab()
    {
        $obj = new Concrete();
        
        $this->assertSame('    ', $obj->getTab());
    }

    /**
     * Generated from @assert () === "\12".
     */
    public function testGetLineEnd()
    {
        $obj = new Concrete();
        
        $this->assertSame("\12", $obj->getLineEnd());
    }

    /**
     * Generated from @assert () === null.
     */
    public function testGetComment()
    {
        $obj = new Concrete();
        
        $this->assertSame(null, $obj->getComment());
    }

    /**
     * Generated from @assert () === 'utf-8'.
     */
    public function testCharset()
    {
        $obj = new Concrete();
        
        $this->assertSame('utf-8', $obj->charset());
        $this->assertSame('utf-8', $obj->charset('ISO-8859-1'));
        $this->assertSame('ISO-8859-1', $obj->charset());
    }

    /**
     * Generated from @assert () === 'utf-8'.
     */
    public function testGetCharset()
    {
        $obj = new Concrete();
        
        $this->assertSame('utf-8', $obj->getCharset());
    }

    /**
     * Generated from @assert () === false.
     */
    public function testIsEmpty()
    {
        $obj = new Concrete();
        
        $this->assertSame(false, $obj->isEmpty());
    }

    /**
     * Generated from @assert () === true.
     */
    public function testIsEnabled()
    {
        $obj = new Concrete();
        
        $this->assertSame(true, $obj->isEnabled());
    }

    /**
     * Generated from @assert () === array().
     */
    public function testGetChildren()
    {
        $obj = new Concrete();
        
        $this->assertSame(array(), $obj->getChildren());
    }

    /**
     * Generated from @assert () === 0.
     */
    public function testCount()
    {
        $obj = new Concrete();
        
        $this->assertSame(0, $obj->count());
    }

    /**
     * @todo Implement testInitOptions().
     */
    public function testInitOptions() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testInitAttributes().
     */
    public function testInitAttributes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testInitElements().
     */
    public function testInitElements() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testInit().
     */
    public function testInit() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetElementName().
     */
    public function testSetElementName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetAttribute().
     */
    public function testSetAttribute() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetWatchedAttributes().
     */
    public function testSetWatchedAttributes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetOption().
     */
    public function testSetOption() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetElementEmpty().
     */
    public function testSetElementEmpty() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetEmpty().
     */
    public function testSetEmpty() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetIsRootElement().
     */
    public function testSetIsRootElement() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetElements().
     */
    public function testSetElements() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetDisabled().
     */
    public function testSetDisabled() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetValue().
     */
    public function testSetValue() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetParent().
     */
    public function testSetParent() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetHtml().
     */
    public function testSetHtml() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetCache().
     */
    public function testSetCache() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetDoctype().
     */
    public function testSetDoctype() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetMime().
     */
    public function testSetMime() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetMimeEncoding().
     */
    public function testSetMimeEncoding() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetPosElements().
     */
    public function testSetPosElements() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetForbidElements().
     */
    public function testSetForbidElements() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetForbiddenElements().
     */
    public function testSetForbiddenElements() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetPosAttributes().
     */
    public function testSetPosAttributes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetIDs().
     */
    public function testSetIDs() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetDoctypes().
     */
    public function testGetDoctypes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetDtd().
     */
    public function testGetDtd() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetElementNamespace().
     */
    public function testSetElementNamespace() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetNamespace().
     */
    public function testSetNamespace() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetAllNamespace().
     */
    public function testSetAllNamespace() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetAllNamespaces().
     */
    public function testGetAllNamespaces() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetAddToDtd().
     */
    public function testSetAddToDtd() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetAddingToDtd().
     */
    public function testSetAddingToDtd() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetLang().
     */
    public function testSetLang() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testExistsAttribute().
     */
    public function testExistsAttribute() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetAttributes().
     */
    public function testSetAttributes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMergeAttributes().
     */
    public function testMergeAttributes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRemoveAttribute().
     */
    public function testRemoveAttribute() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetId().
     */
    public function testSetId() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testUpdateAttributes().
     */
    public function testUpdateAttributes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetName().
     */
    public function testSetName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetTabOffset().
     */
    public function testSetTabOffset() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetIndentLevel().
     */
    public function testSetIndentLevel() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetTabOffset().
     */
    public function testGetTabOffset() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetTab().
     */
    public function testSetTab() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetLineEnd().
     */
    public function testSetLineEnd() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetComment().
     */
    public function testSetComment() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetCharset().
     */
    public function testSetCharset() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testChangeLevel().
     */
    public function testChangeLevel() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__set().
     */
    public function test__set() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__get().
     */
    public function test__get() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__isset().
     */
    public function test__isset() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__unset().
     */
    public function test__unset() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testtoHtml().
     */
    public function testtoHtml() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__call().
     */
    public function test__call() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDisable().
     */
    public function testDisable() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testEnable().
     */
    public function testEnable() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAddElement().
     */
    public function testAddElement() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetElementById().
     */
    public function testGetElementById() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetElementsByName().
     */
    public function testGetElementsByName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testToHtml().
     */
    public function testToHtml() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testToFile().
     */
    public function testToFile() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDisplay().
     */
    public function testDisplay() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testWriteInner().
     */
    public function testWriteInner() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetDoctypeString().
     */
    public function testGetDoctypeString() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testReplace().
     */
    public function testReplace() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetRoot().
     */
    public function testGetRoot() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsRoot().
     */
    public function testIsRoot() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAddDtdAttribute().
     */
    public function testAddDtdAttribute() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}

// Call HTML_Common3_TestSuite_Standard::main() if this source file is executed directly.
if (PHPUnit2_MAIN_METHOD == "Standard::main") {
    Standard::main();
}
?>
